#ifndef __CLASSES_HPP
#define __CLASSES_HPP

#include <vector>
#include <stdexcept>

//Class that stores particle positions and properties in 
// 1D dynamicaly alocated arays, so that copying them
// to the device is easy.************************************************
class Particles {
private:
  int Nkinds; //How many kinds of particles are there
  int* Npart; //How many particles of each kind are there
  double* M; //Mass of each kind of particle
  double* R; //Radius of each kind of particle
  double* Q; //Charge of each kind of particle

  double* pos; //Position of each particle (linearized 3*N array)
  double* mom; //Momentum of each particle (linearized 3*N array)
  double* force; //force on each particle  (linearized 3*N array)
  
public:
  Particles();
  Particles(int, const std::vector<int>&, const std::vector<double>&,
	    const std::vector<double>&, const std::vector<double>&);
  ~Particles();

  //Value getters
  int get_Nkinds() const;
  int get_N(int) const;
  double get_mass(int) const;
  double get_rad(int) const;
  double get_charge(int) const;
  double get_pos(int, int, int) const;
  double get_mom(int, int, int) const;
  double get_F(int, int, int) const;
  void get_kind(int, int&, int&) const;
  
  //Array getters (these give access to private members! Think about friend functions)
  int* get_Npart();
  double* get_M();
  double* get_R();
  double* get_Q();
  double* get_X();
  double* get_P();
  double* get_F();
  
  //Setters
  void set_charge(int, double); 
  void set_pos(int, int, int, double);
  void set_mom(int, int, int, double);
  void set_F(double*, int);
  
  //Modifiers
  void set_zero_F();
  void add_F(int, int, int, double);
};


//Kvector
class Kvector {
private:
  double *kvec;
  unsigned _size;
  
public:
  Kvector(unsigned s);
  ~Kvector();

  unsigned size() const;
  double get(unsigned i) const;
  void set(unsigned i, double val);
};

#endif
